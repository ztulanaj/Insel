# -*- coding: utf-8 -*-
# Copyright 2016 Caren Tischendorf, Hella Rabus
#
# This work may be distributed and/or modified under the
# conditions of the LaTeX Project Public License, either version 1.3
# of this license or (at your option) any later version.
# The latest version of this license is in
#   http://www.latex-project.org/lppl.txt
# and version 1.3 or later is part of all distributions of LaTeX
# version 2005/12/01 or later.
#
# This work has the LPPL maintenance status `author-maintained'.
#
# This work consists of the files
#   bi_msv.py
#   bi_bsp_msv.py
#   bi_rk.py
#
# Erstellt von Caren Tischendorf, Hella Rabus
# fuer die VL "Angewandte Mathematik II"
#

from numpy import array, exp, zeros
from scipy.linalg import solve
from scipy.optimize import fsolve
from matplotlib import use
use('TkAgg')
from matplotlib.pyplot import (axis,
            close,
            legend,
            plot,
            rcParams,
            show,
            title,
            xlabel,
            ylabel,
            yscale,
            xscale)
from pylab import savefig

# define a general solver for Runge Kutta methods
class RKsolve(object):
    # emppty constructor
    def __init__(self):
        pass

    # numerical integration phase of Runge Kutta
    # t0 initial time point
    # T  final time point
    # x0 initial solution point
    # h  stepsize
    # N number of time intervals
    def integrate(self, t0, T , x0, h):
        self.h = h
        dim = len(x0)
        self.dim = dim
        s = self.snum # number of Runge Kutta stages
        print "dim=", dim
        N = int((T-t0)/h)
        self.N = N
        print "N=", N
        # initialize time and space variables
        tout=zeros(N+1)
        xout=zeros((N+1,dim))
        tout[0] = t0
        xout[0,:] = x0
        xold = x0
        told = t0
 
        # approximate x(t_n+1)
        yinitial = zeros(s*dim)
        for n in xrange(1,N+1):
            for i in xrange(s):
            # compute initial solution for Newton iteration
                yinitial[i*dim:(i+1)*dim] = self.fdgl(xout[n,:],tout[n])
            y = fsolve(self.fRK,yinitial,args=(xold,told),xtol=1e-8, maxfev=50)
            xn = xold
            for j in xrange(s):
                Yj = y[j*dim:(j+1)*dim]
                xn = xn + h*self.RKb[j]*Yj  # Approximation von x(t_n)
            tout[n] = told + h
            xout[n,:] = xn
            xold = xn
            told = told + h
        self.xout = xout
        self.tout = tout

#######################################################

    # t current time point
    # xold previous solution point x_{n-1}
    # describes the RK equation for ODE systems fRK(y)=0
    # with y containing all stage solutions Y_i
    def fRK(self,y,xold,told):
        h = self.h
        RKA = self.RKA
        RKb = self.RKb
        RKc = self.RKc
        s = self.snum
        dim = len(xold)
        Y = zeros((s,dim))
        for i in xrange(s):
            Y[i,:] = y[i*dim:(i+1)*dim]  # Stufenapproximation Y_i
        fRK = zeros(s*dim)
        hRKA = h*RKA
        for i in xrange(s):
            ti = told + RKc[i] * h  # Zwischenzeitpunkte t_i
            xi = xold
            for j in xrange(s):
                xi = xi + hRKA[i,j] * Y[j,:]  # Approximation von x(t_i)
            fRK[i*dim:(i+1)*dim] = Y[i,:] - self.fdgl(xi,ti)
        return fRK

########################################################

    # describes different Runge Kutta methods of different stages/orders, implicit/explicit
    # method  string encoding the method to be used by the solver
    def coeffRK(self, method):
        # number of Runge Kutta stages
        s = self.snum
        if method == 'implEuler':
            self.snum = 1
            A = [[1.]]
            b = [1.]
            c = [1.]
        if method == 'RK4':
            # this method is of convergence order = 4
            # number of stages 
            self.snum = 4
            A = [ [0., 0., 0., 0.],
            [0.5, 0., 0., 0.],
            [0. ,0.5 ,0. ,0.],
            [0. ,0. ,1. ,0] ]
            b = [1./6, 1./3, 1./3, 1./6]
            c = [0., 0.5, 0.5, 1.]
        self.RKA = array(A)
        self.RKb = array(b)
        self.RKc = array(c)
        return

########################################################

    # describes the right hand side of the ODE to be solved
    def fdgl(self, x ,t):
        example = self.example
        if  example == 'bspBI': 
            y = -x
        return y

########################################################

    # implements the analytical solution of the ODE described above
    def exactsol(self):
        t = self.tout
        N = len(t)
        example = self.example
        if  example == 'bspBI':
            x = zeros((N,1))
            for n in xrange(N):
                x[n,0] = exp(-t[n])             
        self.xexact = x

########################################################

    # plot the approximate solution to a file with a discriptive naming
    def plot(self,i):
        # plot i-th component
        t = self.tout
        x = self.xout[:,i]
        p0 = plot(t, x, linewidth = 2, color = 'blue', label = 'x['+str(i)+']')
        try:
            self.exactsol()
            p1=plot(t,self.xexact, 'r',label='exact solution')
        except:
            print("no exact solution given")
        title('Example '+self.example+' with '+self.method+', stages='+str(self.snum))
        rcParams.update({'font.size': 12})
        legend(loc='upper right', shadow=True)
        xlabel('t')
        ylabel('x(t)')
        savefig('sol_'+self.example+'_'+self.method+'_s'+str(self.snum)+'_i'+str(i)+'.png')
        show()
        close()
        
#Plott Konvergenzordnung
    def konvergenzordnungsplott(self, t0,T,x0,hlist):
        l = len(hlist)
        fehler = zeros(l)
        for i in range(l):
             self.integrate(t0,T,x0,hlist[i])
             # fehler = x_N - exactcol(t_N)
             self.exactsol()
             fehler[i] = abs(self.xout[-1] - self.xexact[-1])
        print hlist
        print fehler
        yscale ('log')
        xscale ('log')
        plot (hlist, fehler)
        geradex = [1e-3, 1e0]
        geradey = [1e-14, 1e-2]
        plot (geradex, geradey)
        show()
        close()
        
        #t = 
        #x label('-log(h)')
        #y label('log(c)')
        




    
# run the main program
if __name__ == "__main__":
    # initialize a Runge Kutta solver
    bi_solve = RKsolve()
    bi_solve.example = 'bspBI'  
    bi_solve.method = 'RK4'
    bi_solve.snum = 4 # number of Runge Kutta stages to be used, if not set by method itself
    
    if  bi_solve.example == 'bspBI':
        T = 2.0
        t0 = 0.0
        x0 = array([1.0])
        h = 1e0
    if  bi_solve.example == 'bspBstart':
        T = t0+2*h
        t0 = 0.0
        x0 = array([1.0])
        h = 1e-2   
    
    bi_solve.coeffRK(bi_solve.method)
    # actual solve phase
    dim = len(x0)
    
    # Konvergenzordnungstest
    hlist = [h, h/2.0, h/4., h/8., h/16., h/32, h/64, h/128, h/256, h/512, h/1024, h/2048, h/4096]
    bi_solve.konvergenzordnungsplott(t0,T,x0,hlist)
    #bi_solve.integrate(t0,T,x0,h)
    
    bi_solve.exactsol()
    t = bi_solve.tout
    for k in xrange(dim):  # calculate error for k-th component
         xexactk = bi_solve.xexact[:,k]
         errork = (abs(bi_solve.xout[:,k]-xexactk))
         for j in xrange(len(t)):
            errork[j] = errork[j]/max(abs(xexactk[j]),1e-40)

    # plotting
    if  bi_solve.example == 'bspBI':
        bi_solve.plot(0)


